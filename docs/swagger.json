{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/admin/category": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new category to the system",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Add data Category",
                "parameters": [
                    {
                        "description": "Category Input",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/products.CategoryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category successfully added to the system",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request or incomplete category data",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorBadRequest"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/admin/change/password": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint is used to change password in admin side.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "change password admin",
                "parameters": [
                    {
                        "description": "Change password data",
                        "name": "ChangePassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.ChangePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfuly change password",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing data",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponsAuthorization"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/admin/owner/register/employe": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint is used to register new employee to access admin side.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "signup for admin side",
                "parameters": [
                    {
                        "description": "Signup data",
                        "name": "Signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.SignupEmploye"
                        }
                    },
                    {
                        "enum": [
                            "Tetap",
                            "Kontrak",
                            "Freelance"
                        ],
                        "type": "string",
                        "description": "Employment Type (Tetap, Kontrak, Freelance)",
                        "name": "employementType",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "Man",
                            "Woman"
                        ],
                        "type": "string",
                        "description": "Gender (Man, Woman)",
                        "name": "gender",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "Staff",
                            "Owner"
                        ],
                        "type": "string",
                        "description": "Position (Staff, Owner)",
                        "name": "position",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfuly register employee",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing data",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponsAuthorization"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/admin/product": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new Product to the system",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Add data Product",
                "parameters": [
                    {
                        "description": "Product Input",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/products.ProductInput"
                        }
                    },
                    {
                        "enum": [
                            "Man",
                            "Woman",
                            "Unisex"
                        ],
                        "type": "string",
                        "description": "Category Gender (Man, Woman, Unisex)",
                        "name": "categoryGender",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully added to the system",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request or incomplete product data",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorBadRequest"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/auth/login/admin": {
            "post": {
                "description": "This endpoint is used to login by email and password.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "login data",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user successfully login",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponsAuthorization"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/auth/login/user": {
            "post": {
                "description": "This enpoint is used to authenticate users with send cridential data (email dan password).",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login Input",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfuly login, return a token to access enpoint for user",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Request invalid or the data sent is incorrect",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorBadRequest"
                        }
                    },
                    "500": {
                        "description": "Mistake in the server",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/auth/signup/user": {
            "post": {
                "description": "This endpoint is used to create a new user account by submitting registration data in JSON format. Users are required to provide information email, and password. The data will be validated on the server side before the account is created temporary, client have navigate to endpoint signup verification on the client side.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Create New User Account",
                "parameters": [
                    {
                        "description": "User Registration Data (name, email, password)",
                        "name": "Signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account successfully created temporery, return a token to verification email",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request or incomplete data",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorBadRequest"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/auth/signup/user/verification": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint is used to verify the user's email during the registration process. A verification code is sent to the user's email, and the user must input this code to complete the signup process successfully. The request must include the verification code in the form body.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify User Email for Signup",
                "parameters": [
                    {
                        "description": "Email Verification Data (code)",
                        "name": "Signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.Verification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email successfully verified, account registration completed",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing verification code",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponsAuthorization"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/category": {
            "get": {
                "description": "Get detailed information of all data category and product based on category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Get All Data Category",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of categories with details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Category"
                            }
                        }
                    },
                    "404": {
                        "description": "No categories found",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/product": {
            "get": {
                "description": "This endpoint is used to retrieve a list of all products along with detailed information for each product. It also allows you to get the details of a specific product by its ID. The response will include information like product name, description, price, and other relevant details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Retrieve All Product Data",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of products and their details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/products.ResponseProduct"
                            }
                        }
                    },
                    "404": {
                        "description": "Products not found",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/product/female": {
            "get": {
                "description": "Get detailed information of all data Product Female",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get All Data Product Female",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of female products with details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/products.ResponseProduct"
                            }
                        }
                    },
                    "404": {
                        "description": "No female products found",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/product/male": {
            "get": {
                "description": "Get detailed information of all data Product Male",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get All Data Product Male",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of male products with details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/products.ResponseProduct"
                            }
                        }
                    },
                    "404": {
                        "description": "No male products found",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/products.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/user/change/password": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint is used to change password in client side or user.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "change password user",
                "parameters": [
                    {
                        "description": "Change password data",
                        "name": "ChangePassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.ChangePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfuly change password",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing data",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponsAuthorization"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing the request",
                        "schema": {
                            "$ref": "#/definitions/authentication.ResponseErrorInternalServer"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authentication.ChangePassword": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "passwordBefore": {
                    "type": "string"
                }
            }
        },
        "authentication.RegisterUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "authentication.ResponsAuthorization": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "authentication.ResponseErrorBadRequest": {
            "type": "object",
            "properties": {
                "ErrorField": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "authentication.ResponseErrorInternalServer": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "authentication.ResponseSuccess": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string"
                }
            }
        },
        "authentication.SignupEmploye": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "employementType": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "whatsapp": {
                    "type": "string"
                }
            }
        },
        "authentication.Verification": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                }
            }
        },
        "dto.Category": {
            "type": "object",
            "required": [
                "category"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "maxLength": 100
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "products.CategoryInput": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                }
            }
        },
        "products.ProductInput": {
            "type": "object",
            "properties": {
                "categoryGender": {
                    "type": "string"
                },
                "categoryId": {
                    "type": "integer"
                },
                "dateRelase": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "productName": {
                    "type": "string"
                },
                "typeProduct": {
                    "type": "string"
                }
            }
        },
        "products.ResponseErrorBadRequest": {
            "type": "object",
            "properties": {
                "errorFields": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "products.ResponseErrorInternalServer": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "products.ResponseErrorNotFound": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "products.ResponseProduct": {
            "type": "object",
            "properties": {
                "categoryGender": {
                    "type": "string"
                },
                "categoryId": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "hargaProduct": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "namaProduct": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "products.ResponseSuccess": {
            "type": "object",
            "properties": {
                "Success": {
                    "type": "string"
                }
            }
        }
    }
}