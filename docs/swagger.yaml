definitions:
  authentication.ChangePassword:
    properties:
      password:
        type: string
      passwordBefore:
        type: string
    type: object
  authentication.RegisterUser:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  authentication.ResponsAuthorization:
    properties:
      message:
        type: string
    type: object
  authentication.ResponseErrorBadRequest:
    properties:
      ErrorField:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
    type: object
  authentication.ResponseErrorInternalServer:
    properties:
      error:
        type: string
    type: object
  authentication.ResponseSuccess:
    properties:
      success:
        type: string
    type: object
  authentication.SignupEmploye:
    properties:
      address:
        type: string
      dateOfBirth:
        type: string
      email:
        type: string
      employementType:
        type: string
      gender:
        type: string
      image:
        type: string
      name:
        type: string
      position:
        type: string
      whatsapp:
        type: string
    type: object
  authentication.Verification:
    properties:
      code:
        type: integer
    type: object
  dto.Category:
    properties:
      category:
        maxLength: 100
        type: string
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    required:
    - category
    type: object
  products.CategoryInput:
    properties:
      category:
        type: string
    type: object
  products.ProductInput:
    properties:
      categoryGender:
        type: string
      categoryId:
        type: integer
      dateRelase:
        type: string
      desc:
        type: string
      image:
        type: string
      price:
        type: number
      productName:
        type: string
      typeProduct:
        type: string
    type: object
  products.ResponseErrorBadRequest:
    properties:
      errorFields:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
    type: object
  products.ResponseErrorInternalServer:
    properties:
      error:
        type: string
    type: object
  products.ResponseErrorNotFound:
    properties:
      message:
        type: string
    type: object
  products.ResponseProduct:
    properties:
      categoryGender:
        type: string
      categoryId:
        type: integer
      created_at:
        type: string
      hargaProduct:
        type: number
      id:
        type: integer
      image:
        type: string
      namaProduct:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  products.ResponseSuccess:
    properties:
      Success:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/category:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Add a new category to the system
      parameters:
      - description: Category Input
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/products.CategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully added to the system
          schema:
            $ref: '#/definitions/products.ResponseSuccess'
        "400":
          description: Invalid request or incomplete category data
          schema:
            $ref: '#/definitions/products.ResponseErrorBadRequest'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/products.ResponseErrorInternalServer'
      security:
      - BearerAuth: []
      summary: Add data Category
      tags:
      - admin
  /admin/change/password:
    patch:
      consumes:
      - application/x-www-form-urlencoded
      description: This endpoint is used to change password in admin side.
      parameters:
      - description: Change password data
        in: body
        name: ChangePassword
        required: true
        schema:
          $ref: '#/definitions/authentication.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: successfuly change password
          schema:
            $ref: '#/definitions/authentication.ResponseSuccess'
        "400":
          description: Invalid or missing data
          schema:
            $ref: '#/definitions/authentication.ResponseErrorBadRequest'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/authentication.ResponsAuthorization'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/authentication.ResponseErrorInternalServer'
      security:
      - BearerAuth: []
      summary: change password admin
      tags:
      - admin
  /admin/owner/register/employe:
    post:
      consumes:
      - multipart/form-data
      description: This endpoint is used to register new employee to access admin
        side.
      parameters:
      - description: Signup data
        in: body
        name: Signup
        required: true
        schema:
          $ref: '#/definitions/authentication.SignupEmploye'
      - description: Employment Type (Tetap, Kontrak, Freelance)
        enum:
        - Tetap
        - Kontrak
        - Freelance
        in: formData
        name: employementType
        required: true
        type: string
      - description: Gender (Man, Woman)
        enum:
        - Man
        - Woman
        in: formData
        name: gender
        required: true
        type: string
      - description: Position (Staff, Owner)
        enum:
        - Staff
        - Owner
        in: formData
        name: position
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfuly register employee
          schema:
            $ref: '#/definitions/authentication.ResponseSuccess'
        "400":
          description: Invalid or missing data
          schema:
            $ref: '#/definitions/authentication.ResponseErrorBadRequest'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/authentication.ResponsAuthorization'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/authentication.ResponseErrorInternalServer'
      security:
      - BearerAuth: []
      summary: signup for admin side
      tags:
      - admin
  /admin/product:
    post:
      consumes:
      - multipart/form-data
      description: Add a new Product to the system
      parameters:
      - description: Product Input
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/products.ProductInput'
      - description: Category Gender (Man, Woman, Unisex)
        enum:
        - Man
        - Woman
        - Unisex
        in: formData
        name: categoryGender
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product successfully added to the system
          schema:
            $ref: '#/definitions/products.ResponseSuccess'
        "400":
          description: Invalid request or incomplete product data
          schema:
            $ref: '#/definitions/products.ResponseErrorBadRequest'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/products.ResponseErrorInternalServer'
      security:
      - BearerAuth: []
      summary: Add data Product
      tags:
      - admin
  /auth/login/admin:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This endpoint is used to login by email and password.
      parameters:
      - description: login data
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/authentication.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: user successfully login
          schema:
            $ref: '#/definitions/authentication.ResponseSuccess'
        "400":
          description: Invalid or missing
          schema:
            $ref: '#/definitions/authentication.ResponseErrorBadRequest'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/authentication.ResponsAuthorization'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/authentication.ResponseErrorInternalServer'
      summary: Admin login
      tags:
      - authentication
  /auth/login/user:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This enpoint is used to authenticate users with send cridential
        data (email dan password).
      parameters:
      - description: Login Input
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/authentication.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successfuly login, return a token to access enpoint for user
          schema:
            $ref: '#/definitions/authentication.ResponseSuccess'
        "400":
          description: Request invalid or the data sent is incorrect
          schema:
            $ref: '#/definitions/authentication.ResponseErrorBadRequest'
        "500":
          description: Mistake in the server
          schema:
            $ref: '#/definitions/authentication.ResponseErrorInternalServer'
      summary: User login
      tags:
      - authentication
  /auth/signup/user:
    post:
      consumes:
      - application/json
      description: This endpoint is used to create a new user account by submitting
        registration data in JSON format. Users are required to provide information
        email, and password. The data will be validated on the server side before
        the account is created temporary, client have navigate to endpoint signup
        verification on the client side.
      parameters:
      - description: User Registration Data (name, email, password)
        in: body
        name: Signup
        required: true
        schema:
          $ref: '#/definitions/authentication.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: Account successfully created temporery, return a token to verification
            email
          schema:
            $ref: '#/definitions/authentication.ResponseSuccess'
        "400":
          description: Invalid request or incomplete data
          schema:
            $ref: '#/definitions/authentication.ResponseErrorBadRequest'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/authentication.ResponseErrorInternalServer'
      summary: Create New User Account
      tags:
      - authentication
  /auth/signup/user/verification:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This endpoint is used to verify the user's email during the registration
        process. A verification code is sent to the user's email, and the user must
        input this code to complete the signup process successfully. The request must
        include the verification code in the form body.
      parameters:
      - description: Email Verification Data (code)
        in: body
        name: Signup
        required: true
        schema:
          $ref: '#/definitions/authentication.Verification'
      produces:
      - application/json
      responses:
        "200":
          description: Email successfully verified, account registration completed
          schema:
            $ref: '#/definitions/authentication.ResponseSuccess'
        "400":
          description: Invalid or missing verification code
          schema:
            $ref: '#/definitions/authentication.ResponseErrorBadRequest'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/authentication.ResponsAuthorization'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/authentication.ResponseErrorInternalServer'
      security:
      - BearerAuth: []
      summary: Verify User Email for Signup
      tags:
      - authentication
  /category:
    get:
      description: Get detailed information of all data category and product based
        on category
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of categories with details
          schema:
            items:
              $ref: '#/definitions/dto.Category'
            type: array
        "404":
          description: No categories found
          schema:
            $ref: '#/definitions/products.ResponseErrorNotFound'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/products.ResponseErrorInternalServer'
      summary: Get All Data Category
      tags:
      - category
  /product:
    get:
      description: This endpoint is used to retrieve a list of all products along
        with detailed information for each product. It also allows you to get the
        details of a specific product by its ID. The response will include information
        like product name, description, price, and other relevant details.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of products and their details
          schema:
            items:
              $ref: '#/definitions/products.ResponseProduct'
            type: array
        "404":
          description: Products not found
          schema:
            $ref: '#/definitions/products.ResponseErrorNotFound'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/products.ResponseErrorInternalServer'
      summary: Retrieve All Product Data
      tags:
      - product
  /product/female:
    get:
      description: Get detailed information of all data Product Female
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of female products with details
          schema:
            items:
              $ref: '#/definitions/products.ResponseProduct'
            type: array
        "404":
          description: No female products found
          schema:
            $ref: '#/definitions/products.ResponseErrorNotFound'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/products.ResponseErrorInternalServer'
      summary: Get All Data Product Female
      tags:
      - product
  /product/male:
    get:
      description: Get detailed information of all data Product Male
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of male products with details
          schema:
            items:
              $ref: '#/definitions/products.ResponseProduct'
            type: array
        "404":
          description: No male products found
          schema:
            $ref: '#/definitions/products.ResponseErrorNotFound'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/products.ResponseErrorInternalServer'
      summary: Get All Data Product Male
      tags:
      - product
  /user/change/password:
    patch:
      consumes:
      - application/x-www-form-urlencoded
      description: This endpoint is used to change password in client side or user.
      parameters:
      - description: Change password data
        in: body
        name: ChangePassword
        required: true
        schema:
          $ref: '#/definitions/authentication.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: successfuly change password
          schema:
            $ref: '#/definitions/authentication.ResponseSuccess'
        "400":
          description: Invalid or missing data
          schema:
            $ref: '#/definitions/authentication.ResponseErrorBadRequest'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/authentication.ResponsAuthorization'
        "500":
          description: Internal server error while processing the request
          schema:
            $ref: '#/definitions/authentication.ResponseErrorInternalServer'
      security:
      - BearerAuth: []
      summary: change password user
      tags:
      - user
swagger: "2.0"
